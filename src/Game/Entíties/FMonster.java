package Game.Ent√≠ties;import Engine.GameVariables;import Game.GameObjects.Ground;import Game.Interfaces.MovableObject;import Game.Interfaces.Selectable;import javafx.event.EventHandler;import javafx.scene.input.MouseEvent;import javafx.scene.layout.GridPane;import javafx.scene.layout.Pane;import javafx.scene.shape.Line;public class FMonster extends Entity implements MovableObject, Selectable {    private boolean hasTurn = true;    private boolean isSelected = false;    private Line selectedLine = new Line();    public FMonster(int posX, int posY, GridPane root, Ground[][] map) {        super(posX, posY, GameVariables.entityObjectSize, GameVariables.entityObjectSize, GameVariables.playerImage, root, map);        setMovable(object);    }    public void setMovable(Pane p) {        p.setOnMouseClicked(new EventHandler<MouseEvent>() {            @Override            public void handle(MouseEvent event) {                if (isSelected) {                    deselect();                } else {                    select();                }            }        });    }    @Override    public void move(int posX, int posY) {        if (hasTurn) {            map[this.posY][this.posX].closeGround(false);            hasTurn = false;            deselect();            setPosition(posX, posY);            spawn();        }    }    @Override    public void activeViewZone() {        for (int y = -1; y < 2; y++) {            for (int x = -1; x < 2; x++) {                if (posX + x >= 0 && posY + y >= 0 && posX + x < GameVariables.mapSize && posY + y < GameVariables.mapSize) {                    if (posX + x != posX || posY + y != posY)                        if(isSelected && hasTurn) {                            map[posY + y][posX + x].activateZone();                        }else {                            map[posY + y][posX + x].deactivateZone();                        }                }            }        }    }    @Override    public void select() {        if(!isSelected) {            isSelected = true;            selectedLine.setStrokeWidth(GameVariables.selectedLineSize);            selectedLine.setStartX((getOriginObjectWidth() - width) / 2);            selectedLine.setStartY((getOriginObjectHeight() - height) / 2);            selectedLine.setEndX((getOriginObjectWidth() - width) / 2 + width);            selectedLine.setEndY((getOriginObjectHeight() - height) / 2 + height);            object.getChildren().add(selectedLine);            activeViewZone();        }    }    @Override    public void deselect() {        if(isSelected) {            isSelected = false;            object.getChildren().remove(selectedLine);            activeViewZone();        }    }    public void giveTurn(boolean turn) {        hasTurn = turn;    }    @Override    public boolean isSelected() {        return isSelected;    }}